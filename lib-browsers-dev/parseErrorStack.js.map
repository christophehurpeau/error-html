{"version":3,"sources":["../src/parseErrorStack.js"],"names":["err","frames","parse","cache","Map","map","frame","isNative","isEval","fileName","file","sourceMap","source","getFileName","has","get","set","originalPosition","originalPositionFor","line","lineNumber","column","columnNumber","sourcesContent","indexSourceContent","sources","indexOf","contents"],"mappings":";;;;;;AACA;;;;AACA;;;;kBAEe,yBAACA,GAAD,EAAS;AACtB,MAAMC,SAAS,2BAAiBC,KAAjB,CAAuBF,GAAvB,CAAf;AACA,MAAMG,QAAQ,IAAIC,GAAJ,EAAd;;AAEA,SAAOH,OAAOI,GAAP,CAAW,UAACC,KAAD,EAAW;AAC3B,QAAIA,MAAMC,QAAN,IAAkBD,MAAME,MAA5B,EAAoC,OAAOF,KAAP;;AAEnBA,UAAMG,QAHI;;AAI3B,QAAIC,aAAJ;;AAEa;AACX,UAAIC,kBAAJ;AACA,UAAMC,SAASN,MAAMO,WAAN,EAAf;;AAEA,UAAI,CAACD,MAAL,EAAa,OAAON,KAAP;;AAEb,UAAIH,MAAMW,GAAN,CAAUF,MAAV,CAAJ,EAAuB;AACrBD,oBAAYR,MAAMY,GAAN,CAAUH,MAAV,CAAZ;AACD,OAFD,MAEO;AACLD,oBAAY,qCAAcC,MAAd,CAAZ;AACAT,cAAMa,GAAN,CAAUJ,MAAV,EAAkBD,SAAlB;AACD;;AAED,UAAIA,SAAJ,EAAe;AACb,YAAMM,mBAAmBN,UAAUN,GAAV,CAAca,mBAAd,CAAkC;AACzDN,wBADyD;AAEzDO,gBAAMb,MAAMc,UAF6C;AAGzDC,kBAAQf,MAAMgB,YAAN,GAAqB;AAH4B,SAAlC,CAAzB;;AAMA,YAAIL,iBAAiBL,MAAjB,KAA4B,IAAhC,EAAsC;AACpCN,gBAAMG,QAAN,GAAiBQ,iBAAiBL,MAAlC;AACAN,gBAAMc,UAAN,GAAmBH,iBAAiBE,IAApC;AACAb,gBAAMgB,YAAN,GAAqBL,iBAAiBI,MAAjB,GAA0B,CAA/C;;AAEA,cAAIV,UAAUN,GAAV,CAAckB,cAAlB,EAAkC;AAChC,gBAAMC,qBAAqBb,UAAUN,GAAV,CAAcoB,OAAd,CAAsBC,OAAtB,CAA8BT,iBAAiBL,MAA/C,CAA3B;AACA,gBAAIY,uBAAuB,CAAC,CAA5B,EAA+B;AAC7Bd,qBAAO;AACLD,0BAAUQ,iBAAiBL,MADtB;AAELe,0BAAUhB,UAAUN,GAAV,CAAckB,cAAd,CAA6BC,kBAA7B;AAFL,eAAP;AAID;AACF;AACF;AACF;AACF;;AAgBDlB,UAAMI,IAAN,GAAaA,IAAb;AACA,WAAOJ,KAAP;AACD,GA5DM,CAAP;AA6DD,C","file":"parseErrorStack.js","sourcesContent":["import { readFileSync } from 'fs';\nimport errorStackParser from 'error-stack-parser';\nimport { findSourceMap } from './source-map-support';\n\nexport default (err) => {\n  const frames = errorStackParser.parse(err);\n  const cache = new Map();\n\n  return frames.map((frame) => {\n    if (frame.isNative || frame.isEval) return frame;\n\n    const fileName = frame.fileName;\n    let file;\n\n    if (BROWSER) {\n      let sourceMap;\n      const source = frame.getFileName();\n\n      if (!source) return frame;\n\n      if (cache.has(source)) {\n        sourceMap = cache.get(source);\n      } else {\n        sourceMap = findSourceMap(source);\n        cache.set(source, sourceMap);\n      }\n\n      if (sourceMap) {\n        const originalPosition = sourceMap.map.originalPositionFor({\n          source,\n          line: frame.lineNumber,\n          column: frame.columnNumber - 1,\n        });\n\n        if (originalPosition.source !== null) {\n          frame.fileName = originalPosition.source;\n          frame.lineNumber = originalPosition.line;\n          frame.columnNumber = originalPosition.column + 1;\n\n          if (sourceMap.map.sourcesContent) {\n            const indexSourceContent = sourceMap.map.sources.indexOf(originalPosition.source);\n            if (indexSourceContent !== -1) {\n              file = {\n                fileName: originalPosition.source,\n                contents: sourceMap.map.sourcesContent[indexSourceContent],\n              };\n            }\n          }\n        }\n      }\n    } else if (fileName && fileName.startsWith('/')) {\n      if (cache.has(fileName)) {\n        file = cache.get(fileName);\n      } else {\n        file = {};\n        try {\n          const fileContent = readFileSync(fileName).toString();\n          file.fileName = fileName;\n          file.contents = fileContent;\n          cache.set(fileName, file);\n        } catch (e) {\n          cache.set(fileName, file = false);\n        }\n      }\n    }\n\n    frame.file = file;\n    return frame;\n  });\n};\n"]}