{"version":3,"sources":["../src/parseErrorStack.js"],"names":["err","frames","parse","cache","Map","map","frame","isNative","isEval","fileName","file","startsWith","has","get","fileContent","toString","contents","set","e"],"mappings":";;;;;;AAAA;;AACA;;;;;;kBAGeA,OAAO;AACpB,QAAMC,SAAS,2BAAiBC,KAAjB,CAAuBF,GAAvB,CAAf;AACA,QAAMG,QAAQ,IAAIC,GAAJ,EAAd;;AAEA,SAAOH,OAAOI,GAAP,CAAWC,SAAS;AACzB,QAAIA,MAAMC,QAAN,IAAkBD,MAAME,MAA5B,EAAoC,OAAOF,KAAP;;AAEpC,UAAMG,WAAWH,MAAMG,QAAvB;AACA,QAAIC,IAAJ;;AAsCO,QAAID,YAAYA,SAASE,UAAT,CAAoB,GAApB,CAAhB,EAA0C;AAC/C,UAAIR,MAAMS,GAAN,CAAUH,QAAV,CAAJ,EAAyB;AACvBC,eAAOP,MAAMU,GAAN,CAAUJ,QAAV,CAAP;AACD,OAFD,MAEO;AACLC;AACA,YAAI;AACF,gBAAMI,cAAc,sBAAaL,QAAb,EAAuBM,QAAvB,EAApB;AACAL,eAAKD,QAAL,GAAgBA,QAAhB;AACAC,eAAKM,QAAL,GAAgBF,WAAhB;AACAX,gBAAMc,GAAN,CAAUR,QAAV,EAAoBC,IAApB;AACD,SALD,CAKE,OAAOQ,CAAP,EAAU;AACVf,gBAAMc,GAAN,CAAUR,QAAV,EAAqBC,OAAO,KAA5B;AACD;AACF;AACF;;AAEDJ,UAAMI,IAAN,GAAaA,IAAb;AACA,WAAOJ,KAAP;AACD,GA5DM,CAAP;AA6DD,C","file":"parseErrorStack.js","sourcesContent":["import { readFileSync } from 'fs';\nimport errorStackParser from 'error-stack-parser';\nimport { findSourceMap } from './source-map-support';\n\nexport default err => {\n  const frames = errorStackParser.parse(err);\n  const cache = new Map();\n\n  return frames.map(frame => {\n    if (frame.isNative || frame.isEval) return frame;\n\n    const fileName = frame.fileName;\n    let file;\n\n    if (BROWSER) {\n      let sourceMap;\n      const source = frame.getFileName();\n\n      if (!source) return frame;\n\n      if (cache.has(source)) {\n        sourceMap = cache.get(source);\n      } else {\n        sourceMap = findSourceMap(source);\n        cache.set(source, sourceMap);\n      }\n\n      if (sourceMap) {\n        const originalPosition = sourceMap.map.originalPositionFor({\n          source,\n          line: frame.lineNumber,\n          column: frame.columnNumber - 1,\n        });\n\n        if (originalPosition.source !== null) {\n          frame.fileName = originalPosition.source;\n          frame.lineNumber = originalPosition.line;\n          frame.columnNumber = originalPosition.column + 1;\n\n          if (sourceMap.map.sourcesContent) {\n            const indexSourceContent = sourceMap.map.sources.indexOf(originalPosition.source);\n            if (indexSourceContent !== -1) {\n              file = {\n                fileName: originalPosition.source,\n                contents: sourceMap.map.sourcesContent[indexSourceContent],\n              };\n            }\n          }\n        }\n      }\n    } else if (fileName && fileName.startsWith('/')) {\n      if (cache.has(fileName)) {\n        file = cache.get(fileName);\n      } else {\n        file = {};\n        try {\n          const fileContent = readFileSync(fileName).toString();\n          file.fileName = fileName;\n          file.contents = fileContent;\n          cache.set(fileName, file);\n        } catch (e) {\n          cache.set(fileName, (file = false));\n        }\n      }\n    }\n\n    frame.file = file;\n    return frame;\n  });\n};\n"]}